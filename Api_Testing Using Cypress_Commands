describe('Cypress API Testing', () => {

  // 1. Make a GET Request
  it('Should make a GET request and validate status', () => {
    cy.request('GET', 'https://jsonplaceholder.typicode.com/posts/1')
      .its('status')
      .should('eq', 200);
  });

  // 2. Validate API Response Body
  it('Should validate the API response body', () => {
    cy.request('GET', 'https://jsonplaceholder.typicode.com/posts/1')
      .its('body')
      .should('have.property', 'id', 1);
  });

  // 3. Make a POST Request
  it('Should make a POST request and validate response', () => {
    cy.request('POST', 'https://jsonplaceholder.typicode.com/posts', {
      title: 'Cypress Test',
      body: 'Testing API with Cypress',
      userId: 1
    })
      .its('status')
      .should('eq', 201);
  });

  // 4. Make a PUT Request
  it('Should make a PUT request and validate response', () => {
    cy.request('PUT', 'https://jsonplaceholder.typicode.com/posts/1', {
      title: 'Updated Title',
      body: 'Updated Body',
      userId: 1
    })
      .its('status')
      .should('eq', 200);
  });

  // 5. Make a DELETE Request
  it('Should make a DELETE request and validate response', () => {
    cy.request('DELETE', 'https://jsonplaceholder.typicode.com/posts/1')
      .its('status')
      .should('eq', 200);
  });

  // 6. Validate Response Headers
  it('Should validate response headers', () => {
    cy.request('GET', 'https://jsonplaceholder.typicode.com/posts/1')
      .its('headers')
      .should('have.property', 'content-type')
      .and('include', 'application/json');
  });

  // 7. Handle API Authentication (Token)
  it('Should send authenticated request with Bearer Token', () => {
    cy.request({
      method: 'GET',
      url: 'https://api.example.com/protected-data',
      headers: {
        Authorization: 'Bearer your_token_here'
      }
    }).its('status').should('eq', 200);
  });

  // 8. Validate Response Time
  it('Should check response time', () => {
    cy.request('GET', 'https://jsonplaceholder.typicode.com/posts/1')
      .should((response) => {
        expect(response.duration).to.be.lessThan(1000); // Response time < 1 sec
      });
  });

  // 9. Store and Use API Response Data
  it('Should store and use API response data', () => {
    cy.request('GET', 'https://jsonplaceholder.typicode.com/posts/1')
      .then((response) => {
        const postTitle = response.body.title;
        cy.log('Post Title:', postTitle);
      });
  });

  // 10. Mock API Calls (Intercept)
  it('Should mock API response using intercept', () => {
    cy.intercept('GET', '/api/users', { fixture: 'users.json' }).as('getUsers');
    cy.visit('/users');
    cy.wait('@getUsers').its('response.statusCode').should('eq', 200);
  });

});
